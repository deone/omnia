Refactor javascript to use more advanced language features. e.g. inheritance, object and class augmentation 
and object-oriented style.
Write AjaxPost object, refactor all other functions to use object model like AjaxGet()
Remove "Add Item" link from approved requisition detail.
Folderize files in the template folder, if possible do same for controllers
Add created_by column to requisition table and cascade to controller and templates.
Add created_by column to PO table and cascade to controller and templates.
Maybe we might need to add user.purchase_orders and user.requisitions relations just like we have user.approvedrequisitions, for system reports based on users, to track user actions and to guard against fraud.
Remove "Add Item" link from /purchase_order/po_id/edit when all items have been ordered.

* Ideally, purchase Order drop-down should only display vendors who have line items. Tried this out, encountered issues.

Steps from here
===============
Generate Purchase Order
Create Invoice
Handle Delivery @ Warehouse

Purchase Order plan
===================
Create a quantity_ordered column in line item table
For each line item added to PO, add value from quantity field to value of LineItem.quantity_ordered
Create a many to many ER mapping on LineItem->PurchaseOrder

Many-to-Many relationship
=========================
What we are trying to acheive is a situation where a line item can be split between two or more purchase orders.
i.e. If 10 line items are ordered, we can order 5 in one purchase order and 5 in another purchase order. Ideally, we should have a many-to-many relationship between purchaseorder and lineitem tables so that we would be able to track how many line items are in one purchase order and how many purchase orders were used to order a particular line item.

For now, lets order all of a particular line item in one purchase order so that we would have a one-to-many relationship between purchaseorder and lineitem tables. Then we would be able to track the details of all the line items in a given purchase order.

PO Delete
=========
    * For now, you cannot delete PO, will look into that later.
    * User can delete PO line item after it has been added (i.e. line item has been ordered). This action should revert all actions in LineItem.order() in the same sequence.
