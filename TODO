LATER
=====
Refactor javascript to use more advanced language features. e.g. inheritance, object and class augmentation 
and object-oriented style.
Write AjaxPost object, refactor all other functions to use object model like AjaxGet()
Folderize files in the template folder, if possible do same for controllers
Maybe we might need to add user.purchase_orders and user.requisitions relations just like we have user.approvedrequisitions, for system reports based on users, to track user actions.
Remove "Add Item" link from /purchase_order/po_id/edit when all items have been ordered. Same for invoice
We might need to create a relation po->invoice in future.
Add zerofill to requisition, purchaseorder and vendor ids and invoice number.
Eliminate url checks in ajaxget.js.
I hold vendor object in PO and Invoice objects 'cos its needed almost on every page in these modules. And the vendor_object itself always comes with line_items, so I see us having a recursion issue if we try to access a vendor object with many line items.
Add "View Invoices" functionality later. For now its commented out in menu.html.
Pagination
Search facility for any record:Requisition, Invoice, Purchase Order
Eliminate username and use email to sign in to the application.
Plenty other refactoring associated with configuration parameters.

* Ideally, purchase Order drop-down should only display vendors who have line items. I tried this out and it worked, the only issue is documented in models.

NOW
===
Remove "Add Item" link from approved requisition detail and closed requisition.
Must Invoice number column be unique?
Implement drop down in storage location field.
Remove "Preview" link from Purchase Order.
Checkout how to use jquery each() function to shorten the displayItems() in warehouse.js
Config file should contain itemtypes. This would eliminate using the itemtype value of lineitem to determine how things are done in the warehouse. Move other stuff into config as required.
Refactor displayItems in warehouse.js.
Refactor get_for_invoice() and get_by_invoice_no() in lineitem.py
Now we have lineitems in this format: ['MS Word', 'Software', 2]
    We can have {'item': ['MS Word', 'Software', 2], 'specification': 'CQ60', 'vendor': 'HP'} OR
                {'name': 'MS Word', itemtype: 'software', quantity: 2, 'specification': ['CQ60'], 'vendor': 'HP'}
    The latter is better, its more programmatic! We would be able to show name and quantity as a link 
    and spec and vendor (hidden) in the same list item. When we click the link, the div is toggled.

To get the quantity, we can have a count method in which we would pass a name and select based on that name, we would return the length of the list.


Many-to-Many relationship
=========================
What we are trying to acheive is a situation where a line item can be split between two or more purchase orders.
i.e. If 10 line items are ordered, we can order 5 in one purchase order and 5 in another purchase order. Ideally, we should have a many-to-many relationship between purchaseorder and lineitem tables so that we would be able to track how many line items are in one purchase order and how many purchase orders were used to order a particular line item.

For now, lets order all of a particular line item in one purchase order so that we would have a one-to-many relationship between purchaseorder and lineitem tables. Then we would be able to track the details of all the line items in a given purchase order.

PO Delete
=========
    * For now, you cannot delete PO, will look into that later.
    * User can delete PO line item after it has been added (i.e. line item has been ordered). This action should revert all actions in LineItem.order() in the same sequence.

Fine-tuning Invoice
==================
Invoice should relate with PO and store its items in another table.
Knock off invoice_no field in lineitem table.
We may add "Invoice Received" status to PO.


Authorization
* Buyer, Procurement Manager, Warehouse Manager, Administrator
Warehouse Item listing

Docs
====
List of Tools
Application File Hierarchy
